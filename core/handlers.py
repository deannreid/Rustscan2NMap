import os
import json
import re
import shutil
import ipaddress

from .utils import fncPrintMessage
from config import CONFIG_PATH, HOSTS_FILE, LDAP_PORTS

def fncEnsureInstalled(tool_name, install_hint=None):
    """
    Check if `tool_name` is on PATH; if missing, warn and allow user to skip.
    Returns True if the tool is available, False to skip its scan.
    """
    if shutil.which(tool_name) is None:
        msg = f"'{tool_name}' is not installed or not in PATH."
        if install_hint:
            msg += f" (Hint: {install_hint})"
        fncPrintMessage(msg, "warning")
        choice = input(f" Skip {tool_name} scan? (y/n): ").strip().lower()
        if choice == 'y':
            fncPrintMessage(f"Skipping {tool_name}.", "info")
            return False
        else:
            fncPrintMessage(f"Please install {tool_name} and re-run when ready.", "warning")
            return False
    return True

def fncCheckConfigFileExists():
    if os.path.exists(CONFIG_PATH):
        fncPrintMessage(f"Configuration file found: {CONFIG_PATH}", "info")
    else:
        fncPrintMessage(f"Configuration file not found: {CONFIG_PATH}", "warning")

def fncLoadSkippedDependencies():
    if os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH, "r") as file:
            return json.load(file)
    return []

def fncSaveSkippedDependencies(skipped_dependencies):
    with open(CONFIG_PATH, "w") as file:
        json.dump(skipped_dependencies, file)


def fncAddToHosts(target_input, domains):
    """
    Add domain(s) under an RS2NM block in the hosts file.
    If target_input is an IP and multiple domains, prompt to select.
    Output:
    
    
    # Generated by RS2NM
    1.2.3.4 domain1 domain2
    # End of RS2NM Section
    """
    # 1) Clean up
    # remove empty / whitespace-only entries
    domains = [d.strip() for d in domains if d and d.strip()]
    if not domains:
        return

    # 2) Detect if user gave an IP
    try:
        ipaddress.ip_address(target_input)
        is_ip = True
    except ValueError:
        is_ip = False

    # 3) If it's an IP *and* there are multiple domains, prompt selection
    if is_ip and len(domains) > 1:
        fncPrintMessage("Multiple domains found for this IP:", "info")
        for idx, d in enumerate(domains, 1):
            print(f"  {idx}. {d}")
        choice = input("Select domains to add (comma-separated or 'all'): ").strip().lower()
        if choice == "all":
            selected = domains
        else:
            nums = [s.strip() for s in choice.split(",")]
            selected = []
            for n in nums:
                if n.isdigit():
                    i = int(n)
                    if 1 <= i <= len(domains):
                        selected.append(domains[i-1])
            if not selected:
                fncPrintMessage("No valid selection; aborting hosts update.", "warning")
                return
    else:
        # either a hostname was passed in, or only one domain
        selected = domains

    # 4) Read existing hosts file
    try:
        with open(HOSTS_FILE, "r", encoding="utf-8", errors="ignore") as rf:
            lines = rf.readlines()
    except Exception as e:
        fncPrintMessage(f"Could not read hosts file: {e}", "error")
        return

    header = "# Generated by RS2NM"
    footer = "# End of RS2NM Section"

    # 5) Find an existing RS2NM block
    start = next((i for i,l in enumerate(lines) if l.strip()==header), None)
    end   = next((i for i,l in enumerate(lines) if l.strip()==footer), None)

    if start is not None and end is not None and end > start:
        # insert just before the footer
        insert_at = end
        entry = f"{target_input}\t{' '.join(selected)}\n"
        lines.insert(insert_at, entry)
    else:
        # append two blank lines, header, entry, footer
        if not lines or not lines[-1].endswith("\n"):
            lines.append("\n")
        lines.append("\n")
        lines.append(header + "\n")
        lines.append(f"{target_input}\t{' '.join(selected)}\n")
        lines.append(footer + "\n")

    # 6) Write back
    try:
        with open(HOSTS_FILE, "w", encoding="utf-8") as wf:
            wf.writelines(lines)
        fncPrintMessage(
            f"Added {', '.join(selected)} under RS2NM block",
            "success"
        )
        fncPrintMessage(
            "!!! Reminder: Remove these entries after your engagement !!!",
            "warning"
        )
    except PermissionError:
        fncPrintMessage("Permission denied: Unable to write to the hosts file.", "error")
    except Exception as e:
        fncPrintMessage(f"Error writing to hosts file: {e}", "error")

def fncGetDomainsFromNmap(nmap_output):
    fncPrintMessage("Checking for domain information", "info")
    domains = set()

    for line in nmap_output.split('\n'):
        if any(port + "/tcp" in line for port in LDAP_PORTS) and 'open' in line and 'LDAP' in line:
            match = re.search(r'Domain: ([^\s,]+)', line)
            if match:
                domains.add(match.group(1).rstrip('.0'))

        if 'Subject Alternative Name' in line and 'DNS:' in line:
            domains.update(re.findall(r'DNS:([^,]+)', line))

        if 'Nmap scan report for' in line:
            match = re.search(r'Nmap scan report for ([^\s]+)', line)
            if match:
                domains.add(match.group(1))

        if '|_http-title: Did not follow redirect to http://' in line:
            match = re.search(r'http:\/\/([^\/]+)', line)
            if match:
                domains.add(match.group(1))

        if '|_https-title: Did not follow redirect to https://' in line:
            match = re.search(r'https:\/\/([^\/]+)', line)
            if match:
                domains.add(match.group(1))

    return list(domains)



def fncSmbPortsOpen(open_ports):
    from config import SMB_PORTS
    return any(port in SMB_PORTS for port in open_ports.split(','))
